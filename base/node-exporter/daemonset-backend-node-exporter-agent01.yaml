apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: node-exporter
  name: backend-node-exporter01
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: exporter
      app.kubernetes.io/name: node-exporter
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: node-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: '/metrics'
        prometheus.io/port: "9100"
    spec:
      hostPID: true
      hostIPC: true
      hostNetwork: true
      enableServiceLinks: false
      serviceAccountName: prometheus
      securityContext:
        seccompProfile: { type: RuntimeDefault }  
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: backend-node-exporter01
        image: backend-node-exporter01
        imagePullPolicy: IfNotPresent
        resources:
          requests: { cpu: 50m, memory: 50Mi }
          limits:   { cpu: 100m, memory: 100Mi }
        securityContext:
          privileged: true
          readOnlyRootFilesystem: true 
        args:
          - --path.sysfs=/host/sys
          - --path.rootfs=/root
          - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/pods/.+)($|/)
          - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
          - --collector.netclass.ignored-devices=^(veth.*)$
          - --no-collector.nfsd
        ports:
          - containerPort: 9100
            protocol: TCP
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
          - name: sys
            mountPath: /host/sys
            readOnly: true
          - name: root
            mountPath: /root
            readOnly: true
          - name: textfile
            mountPath: /var/lib/node_exporter/textfile_collector
      - name: sensor-textfile
        image: alpine:3.20
        command: ["/bin/sh","-c"]
        args:
          - >
            chmod +x /scripts/sensor_export.sh &&
            while true; do
              SYS_CLASS_ROOT=/host-sys/class TEXTFILE_DIR=/textfile NODE_NAME=$(hostname) /scripts/sensor_export.sh || true;
              sleep 10;
            done
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef: { fieldPath: spec.nodeName } 
        volumeMounts:
          - name: sys
            mountPath: /host-sys
            readOnly: true
          - name: textfile
            mountPath: /textfile
          - name: scripts
            mountPath: /scripts
            readOnly: true
        resources:
          requests: { cpu: 5m, memory: 16Mi }
          limits:   { cpu: 50m, memory: 64Mi }
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
      volumes:
        - name: sys
          hostPath:
            path: /sys
            type: Directory
        - name: root
          hostPath:
            path: /
            type: Directory
        - name: textfile
          emptyDir: {}
        - name: scripts
          configMap:
            name: sensor-textfile-scripts
            defaultMode: 0555
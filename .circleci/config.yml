version: 2.1
orbs: 
  kubernetes: circleci/kubernetes@1.3.0

workflows:
  testing:
    jobs:
      - create-update:
          context: kaniko
          filters:
            branches:
              only: 
                - main
      - status-pod:
          context: kaniko
          requires:
            - create-update
          filters:
            branches:
              only: 
                - main
      - status-frontend-grafana:
          context: kaniko
          requires:
            - status-pod
          filters:
            branches:
              only: 
                - main
      - status-backend-grafana:
          context: kaniko
          requires:
            - status-frontend-grafana
          filters:
            branches:
              only: 
                - main
      - status-frontend-loki:
          context: kaniko
          requires:
            - status-backend-grafana
          filters:
            branches:
              only: 
                - main
      - status-backend-influxdb:
          context: kaniko
          requires:
            - status-frontend-loki
          filters:
            branches:
              only: 
                - main
      - status-backend-telegraf:
          context: kaniko
          requires:
            - status-backend-influxdb
          filters:
            branches:
              only: 
                - main
      - status-backend-promtail:
          context: kaniko
          requires:
            - status-backend-telegraf
          filters:
            branches:
              only: 
                - main
      - status-backend-alertmanager:
          context: kaniko
          requires:
            - status-backend-promtail
          filters:
            branches:
              only: 
                - main
      - delete:
          context: kaniko
          requires:
            - status-backend-alertmanager
          filters:
            branches:
              only: 
                - main

executors:
  default:
    docker:
      - image: 'cimg/base:stable'
commands:
  setup_kubectl:
    steps:
      - run:
          name: "kubectl install"
          command: |
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/arm64/kubectl
              chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin/kubectl
              kubectl version --client
  setup_kubeconfig:
    steps:
      - run:
          name: "kubeconfig"
          command: |
              mkdir -p ~/.kube/
              echo -n "${KUBECONFIG_DATA}" | base64 -d > ~/.kube/config
              kubectl config use-context ${CONTEXT_NAME}

jobs:
  create-update:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - setup_kubectl
      - setup_kubeconfig
      - kubernetes/create-or-update-resource:
          kustomize: true
          resource-file-path: overlay/testing
          show-kubectl-command: true

  status-pod:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-pod
          command: |
            ns=testing-monitoring
            count=15
            while true ;do 
                if [[ $(kubectl get pods -n $ns --field-selector=status.phase=Running | awk 'NR>1 {print $3}' | wc -l) -ge ${count} ]] ;then 
                    echo "pod status OK" ; sleep 3 ; break 
                else echo "pod status NG" ; sleep 3
                fi
            done

  status-frontend-grafana:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-frontend-grafana
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=grafana" -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- ps aux | grep grafana-server | grep -v grep | wc -l) -ge 1  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-grafana:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-grafana
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=grafana" -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- ps aux | grep mysqld | grep -v grep | wc -l) -ge 1  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-frontend-loki:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-frontend-loki
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=frontend-loki-app01" -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- ps aux | grep mysqld | grep -v grep | wc -l) -ge 1  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-influxdb:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-influxdb
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=influxdb" -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- influx ping ) -eq OK  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-telegraf:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-telegraf
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=telegraf" -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- ps aux | grep telegraf | grep -v grep | wc -l) -ge 1  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-promtail:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-promtail
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=promtailb " -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- promtail -version | grep promtail | awk '{print $2,$3}') -eq "version 2.5.0"  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-alertmanager:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-alertmanager
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=promtailb " -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- ps aux | grep alertmanager | grep -v grep | wc -l) -ge 1   ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  status-backend-node-exporter:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: status-backend-node-exporter
          command: |
            ns=testing-monitoring
            app=$(kubectl get pod --selector="app.kubernetes.io/name=node-exporter " -n $ns | awk 'NR>1{print $1}' | head -1)
            if [[ $(kubectl -n $ns exec pod/${app} -- node-exporter --version | grep node_ exporter | awk '{print $2,$3}') -eq "version 1.3.1"  ]] ;then
              echo "ps status OK" 
            else
              echo "ps status NG" ; break
            fi

  delete:
    resource_class: abeyuki/circleci
    executor:
      name: default
    steps:
      - checkout
      - setup_kubectl
      - setup_kubeconfig
      - kubernetes/delete-resource:
          kustomize: true
          now: true
          resource-file-path: overlay/testing
          wait: true